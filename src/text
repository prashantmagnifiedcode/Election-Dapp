import React, {useState,useEffect} from "react";
import SimpleStorageContract from "./contracts/SimpleStorage.json";
import getWeb3 from "./getWeb3";

import "./App.css";

const App =()=> {
  
  
  const[initiade,setinitiade]=useState({ storageValue: 0, web3: null, accounts: null, contract: null })
  const [text,settext]=useState(0)
  useEffect(() => {
    componentDidMount()
  }, [])
  const fun=(e)=>{
    
    let name = e.target.name;
    let value = e.target.value;
    settext(value)
    
  }
  const componentDidMount = async () => {

    try {
      // Get network provider and web3 instance.
      const web3 = await getWeb3();

      // Use web3 to get the user's accounts.
      const accounts = await web3.eth.getAccounts();

      const networkId = await web3.eth.net.getId();
      const deployedNetwork = SimpleStorageContract.networks[networkId];
      const instance = new web3.eth.Contract(
        SimpleStorageContract.abi,
        deployedNetwork && deployedNetwork.address,
      );

    setinitiade({...initiade,web3, accounts, contract:instance} );
    runExample()
    } catch (error) {
      // Catch any errors for any of the above operations.
      alert(
        `Failed to load web3, accounts, or contract. Check console for details.`,
      );
      console.error(error);
    }
  };

  const runExample = async () => {
    const { accounts, contract } = initiade

    // Stores a given value, 5 by default.
    console.log(accounts)
    console.log(text)
    await contract.methods.set(1).send({ from: accounts[0] });

    // Get the value from the contract to prove it worked.
    const response = await contract.methods.get().call();

    // Update state with the result.
    setinitiade({...initiade, storageValue: response });
  };

  
    if (!initiade.web3) {
      return <div>Loading Web3, accounts, and contract...</div>;
    }
    return (
      <>
      <div className="App">
        <h1>Good to Go!</h1>
        <p>Your Truffle Box is installed and ready.</p>
        <h2>Smart Contract Example</h2>
        <p>
          If your contracts compiled and migrated successfully, below will show
          a stored value of 5 (by default).
        </p>
        <p>
          Try changing the value stored on <strong>line 42</strong> of App.js.
        </p>
        <div>The stored value is: {initiade.storageValue}</div>
      </div>
      <div>
       // <input type="text" name="textval" value={text} onChange={fun} />
        <button onClick={()=>runExample()}>submit</button>
      </div>
      </>
    );
  
}

export default App;
